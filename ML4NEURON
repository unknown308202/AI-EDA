import numpy as np
import matplotlib.pyplot as plt

# Generate some example data
np.random.seed(0)
X = 2 * np.random.rand(100, 1)  # 100 samples, single feature
y = 4 + 3 * X + np.random.randn(100, 1)  # y = 4 + 3x + noise

# Add bias term (a column of ones) to X
X_b = np.c_[np.ones((X.shape[0], 1)), X]  # X_b.shape will be (100, 2)

# Initialize parameters (weights)
theta = np.random.randn(2, 1)  # two parameters: one for bias, one for the feature

# Set hyperparameters
learning_rate = 0.01
epochs = 1000

# Gradient Descent
for epoch in range(epochs):
    gradients = 2 / X_b.shape[0] * X_b.T.dot(X_b.dot(theta) - y)
    theta -= learning_rate * gradients

# Predictions
y_pred = X_b.dot(theta)

# Plotting the results
plt.figure(figsize=(10, 6))
plt.scatter(X, y, color='blue', label='Data points')
plt.plot(X, y_pred, color='red', linewidth=2, label='Fitted line')
plt.xlabel('X')
plt.ylabel('y')
plt.title('Linear Regression with a Single Neuron')
plt.legend()
plt.show()

print("Model parameters (theta):\n", theta)
