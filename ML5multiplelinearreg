import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Generate a synthetic dataset for house prices
np.random.seed(42)
num_samples = 100

# Features: Square footage, Number of bedrooms, Age of the house
X = np.random.rand(num_samples, 3) * np.array([2000, 5, 50])  # Example ranges

# Target: Price of the house
y = (50000 + X[:, 0] * 100 + X[:, 1] * 20000 - X[:, 2] * 300) + np.random.randn(num_samples) * 10000

# Convert to DataFrame for better readability
df = pd.DataFrame(X, columns=['Square Footage', 'Bedrooms', 'Age'])
df['Price'] = y

# Splitting the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Creating and training the model
model = LinearRegression()
model.fit(X_train, y_train)

# Making predictions
y_pred = model.predict(X_test)

# Model evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)
print("\nModel Coefficients:", model.coef_)
print("Model Intercept:", model.intercept_)

# Plotting the results
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', label='Predicted vs Actual')
plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linewidth=2, label='Perfect Fit Line')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted House Prices')
plt.legend()
plt.show()
